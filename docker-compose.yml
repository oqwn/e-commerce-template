version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: fast-trade-engine-frontend:latest
    container_name: fast-trade-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - fast-trade-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: fast-trade-engine-backend:latest
    container_name: fast-trade-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fasttrader
      - SPRING_DATASOURCE_USERNAME=fasttrader
      - SPRING_DATASOURCE_PASSWORD=password
      - REDIS_HOST=redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend-logs:/app/logs
    networks:
      - fast-trade-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: fast-trade-postgres
    environment:
      - POSTGRES_DB=fasttrader
      - POSTGRES_USER=fasttrader
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - fast-trade-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fasttrader -d fasttrader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: fast-trade-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - fast-trade-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fast-trade-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./backend/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - fast-trade-net
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: fast-trade-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana-data:/var/lib/grafana
      - ./backend/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./backend/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - fast-trade-net
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  backend-logs:

networks:
  fast-trade-net:
    driver: bridge